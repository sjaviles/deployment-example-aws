AWSTemplateFormatVersion: "2010-09-09"
Description: ""
Parameters:
  ServiceName:
    Type: String
    Description: Nombre del microservicio
    Default: paketo
  TaskDefinitionARN:
    Type: String
    Description: ARN de Task Definition
  HealthPath:
    Type: String 
    Description: Path de health del servicio  
  APIBasePath:
    Type: String 
    Description: Basepath en API Gateway
    Default: ""
  StageName:
    Type: String 
    Description: Nombre del stage del API Gateway
    Default: prod    
  ContainerPort:
    Type: Number
    Description: port number exposed from the container image.
    Default: 8001
  PrioridadListener:
    Type: Number
    Description: Prioridad de de la regla en el listener. No se debe repetir.
    Default: 1

Conditions:
  IsAPIBasePathNotEmpty:  !Not [!Equals [!Ref "APIBasePath", ""]]

Resources:
    ElasticLoadBalancingV2TargetGroup:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 300
            # Hardcode. Cambiar el path por el correspondiente para health
            HealthCheckPath: !Ref HealthPath
            Port: 80
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 2
            TargetType: "ip"
            Matcher: 
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: !ImportValue ServicesVPC
            Name: !Sub "${ServiceName}-1"          
            HealthCheckEnabled: true
            TargetGroupAttributes: 
              - 
                Key: "stickiness.enabled"
                Value: "false"
              - 
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              - 
                Key: "stickiness.app_cookie.cookie_name"
                Value: ""
              - 
                Key: "stickiness.type"
                Value: "lb_cookie"
              - 
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "slow_start.duration_seconds"
                Value: "0"
              - 
                Key: "stickiness.app_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"

    ALBListenerProdRule:
      Condition: IsAPIBasePathNotEmpty
      Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
      Properties:
        Actions:
          - Type: forward
            ForwardConfig:
              TargetGroups:
                - TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
                  Weight: 1
        Conditions:
          - 
            Field: "path-pattern"
            # Hardcode. Cambiar el path por el correspondiente. 
            # Se recomienda que permanezca el wildcard.
            Values: 
              - !Sub "${APIBasePath}*"
        ListenerArn: !ImportValue ElasticLoadBalancingV2Listener
        Priority: !Ref PrioridadListener

    ECSService:
        Type: "AWS::ECS::Service"
        DependsOn: 
          - TaskLogGroup
        Properties:
            ServiceName: !Ref ServiceName
            Cluster: !ImportValue ECSCluster
            LoadBalancers: 
              - 
                TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
                ContainerName: !Ref ServiceName
                ContainerPort: !Ref ContainerPort
            DesiredCount: 1
            LaunchType: "FARGATE"
            PlatformVersion: "1.4.0"
            TaskDefinition: !Ref TaskDefinitionARN
            DeploymentConfiguration: 
                MaximumPercent: 200
                MinimumHealthyPercent: 100
            NetworkConfiguration: 
                AwsvpcConfiguration: 
                    AssignPublicIp: "DISABLED"
                    SecurityGroups: 
                      - !Ref EC2SecurityGroup
                    Subnets: 
                      - !ImportValue PrivateSubnet1a
            HealthCheckGracePeriodSeconds: 0
            SchedulingStrategy: "REPLICA"
            DeploymentController: 
                Type: "ECS"

    EC2SecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "SG para ms"
            GroupName: !Sub ${ServiceName}-sg
            VpcId: !ImportValue ServicesVPC
            SecurityGroupIngress: 
              - 
                SourceSecurityGroupId: !ImportValue VPCDefaultSecurityGroup
                SourceSecurityGroupOwnerId: !Ref AWS::AccountId
                FromPort: !Ref ContainerPort
                IpProtocol: "tcp"
                ToPort: !Ref ContainerPort
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    TaskLogGroup:
      Type: 'AWS::Logs::LogGroup'
      Properties:
        LogGroupName: !Sub '/ecs/${ServiceName}'
        RetentionInDays: 30


##############################
# Definici√≥n de API Gateway  #
##############################
    Api:
      Condition: IsAPIBasePathNotEmpty
      Type: 'AWS::ApiGateway::RestApi'
      Properties:
        Name: !Ref ServiceName

    Resource:
      Condition: IsAPIBasePathNotEmpty
      Type: 'AWS::ApiGateway::Resource'
      Properties:
        ParentId: !GetAtt Api.RootResourceId
        RestApiId: !Ref Api
        PathPart: '{proxy+}'

    RootMethod:
      Condition: IsAPIBasePathNotEmpty
      Type: 'AWS::ApiGateway::Method'
      Properties:
        HttpMethod: ANY
        ResourceId: !GetAtt Api.RootResourceId
        RestApiId: !Ref Api
        AuthorizationType: NONE
        Integration:
          IntegrationHttpMethod: ANY
          ConnectionType: VPC_LINK
          ConnectionId: !ImportValue ApiGatewayVpcLink        
          Type: HTTP_PROXY
          Uri: !Sub 
            - "http://${DNSNLB}${APIBasePath}"
            - DNSNLB: !ImportValue DNSNLB
          PassthroughBehavior: WHEN_NO_MATCH
          IntegrationResponses:
            - StatusCode: 200

    ProxyMethod:
      Condition: IsAPIBasePathNotEmpty
      Type: 'AWS::ApiGateway::Method'
      Properties:
        HttpMethod: ANY
        ResourceId: !Ref Resource
        RestApiId: !Ref Api
        AuthorizationType: NONE
        RequestParameters:
          method.request.path.proxy: true
        Integration:
          RequestParameters:
            integration.request.path.proxy: 'method.request.path.proxy'
          IntegrationHttpMethod: ANY
          ConnectionType: VPC_LINK
          ConnectionId: !ImportValue ApiGatewayVpcLink
          Type: HTTP_PROXY
          Uri: !Sub 
            - "http://${DNSNLB}${APIBasePath}"
            - DNSNLB: !ImportValue DNSNLB
          PassthroughBehavior: WHEN_NO_MATCH
          IntegrationResponses:
            - StatusCode: 200

    Deployment:
      Condition: IsAPIBasePathNotEmpty    
      DependsOn:
        - RootMethod
        - ProxyMethod
      Type: 'AWS::ApiGateway::Deployment'
      Properties:
        RestApiId: !Ref Api
        StageName: !Ref StageName

    APIKey:
      Condition: IsAPIBasePathNotEmpty
      Type: AWS::ApiGateway::ApiKey
      Properties: 
        Enabled: true
        Name: !Sub "${ServiceName}-apikey"
        StageKeys: 
          - RestApiId: !Ref Api
            StageName: prod